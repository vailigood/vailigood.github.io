(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{363:function(t,a,r){"use strict";r.r(a);var e=r(42),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"布局"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#布局"}},[t._v("#")]),t._v(" 布局")]),t._v(" "),r("h2",{attrs:{id:"定位元素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定位元素"}},[t._v("#")]),t._v(" 定位元素")]),t._v(" "),r("p",[t._v("定位元素有：固定定位、相对定位、绝对定位和粘性定位")]),t._v(" "),r("p",[t._v("定位元素很实用，也很容易产生问题。再用静态元素可以达到目的的情况下，尽量不要使用定位元素。使用定位元素会使得元素本身脱离文档流，一定程度上不利于布局，且对性能有影响。")]),t._v(" "),r("h3",{attrs:{id:"相对定位"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#相对定位"}},[t._v("#")]),t._v(" 相对定位")]),t._v(" "),r("p",[t._v("给一个元素设置 position:relative 就能将元素设置为相对定位，通常来说看不到任何视觉上的改变。相对定位的元素以及其周围的素有元素，默认都保持着原有的位置。如果加上 top, right, bottom, left 属性，元素则会从原来的位置移走，不会改变周围元素的位置，同时自身也还是"),r("strong",[t._v("跟随着文档流移动")]),t._v("，只是自身有了偏移而已。left, right, top 和 bottom 四个元素不能同时生效，同时使用时， bottom 和 right 会被忽略。")]),t._v(" "),r("p",[t._v("相对定位最常用的用法是与绝对定位一同使用，作为绝对定位的包含块使用。")]),t._v(" "),r("h3",{attrs:{id:"固定定位"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#固定定位"}},[t._v("#")]),t._v(" 固定定位")]),t._v(" "),r("p",[t._v("给一个元素设置 position: fixed 就能将元素放在"),r("strong",[t._v("视口")]),t._v("的任意位置。这需要搭配四种属性一起使用：top、right、bottom 和 left。如果不写上述四个属性，则会跟随文档流，但又不占据空间，从而有一种浮在文档上的感觉。同时定义 left:0 和 right:0，则相当于 width: 100% 的效果，固定定位的元素, left, right, top 和 bottom 四个属性是可以同时生效的，定义了元素距离"),r("strong",[t._v("视口")]),t._v("的位置，间接定义了这个元素的大小。")]),t._v(" "),r("h3",{attrs:{id:"绝对定位"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#绝对定位"}},[t._v("#")]),t._v(" 绝对定位")]),t._v(" "),r("p",[t._v("给一个元素设置 position: absolute 就能将元素放在父级元素包含块里。与固定定位不同，其包含块不是整个"),r("strong",[t._v("视口")]),t._v("，而是父级定位元素形成的包含块。跟固定元素一样，属性 top、right、bottom 和 left 决定了元素的边缘在包含块里的位置。")]),t._v(" "),r("h3",{attrs:{id:"z-index"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#z-index"}},[t._v("#")]),t._v(" z-index")]),t._v(" "),r("p",[t._v("z-index 属性的值可以是任意整数（包括负数），拥有较高值的元素出现在较低值的元素前面，拥有负数的元素出现在静态元素的后面。")]),t._v(" "),r("p",[t._v("但是，即使 z-index 属性很大，也并不能让元素脱离层叠上下文出现在最顶层。假设：A，B 和 C 三个元素作为父元素都脱离文档流，是定位元素，本身 C 在 B 的上面，B 在 A 的上面，那么，即使 A 的子定位元素 z-index 设置成 9999999，其位置也无法高于 B 元素的子静态元素，同理 C 也是。这因为 z-index 属性不能让元素脱离层叠上下文。")]),t._v(" "),r("h2",{attrs:{id:"flexbox"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#flexbox"}},[t._v("#")]),t._v(" Flexbox")]),t._v(" "),r("p",[t._v("留下一坑")])])}),[],!1,null,null,null);a.default=s.exports}}]);